<?php

namespace SmartUnity\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * questionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class questionRepository extends EntityRepository {

    /////////////////////////////
    //////       COUNT QUESTIONS
    /////////////////////////////
    //Count les questions on Fire
    public function getNombreQuestionsOnFire() {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT COUNT(q.id) AS nb_questions
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE c.date_v <=> NULL
                AND q.date < SUBTIME(NOW(), \'0 48:00:00.0000\')
                AND q.signaler = 0';

        $query = $this->_em->createNativeQuery($sql, $rsm);

        return $query->getSingleScalarResult();
    }

    //Count les dernières questions
    public function getNombreLastQuestions() {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT COUNT(q.id) AS nb_questions
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE c.date_v <=> NULL
                AND q.signaler = 0';

        $query = $this->_em->createNativeQuery($sql, $rsm);

        return $query->getSingleScalarResult();
    }

    //Count les questions validées
    public function getNombreValidatedQuestions() {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT COUNT(q.id) AS nb_questions
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE NOT c.date_v <=> NULL
                AND q.signaler = 0';

        $query = $this->_em->createNativeQuery($sql, $rsm);

        return $query->getSingleScalarResult();
    }

    public function getNbQuestionsForUser($membreId) {
        $query = $this->_em->createQuery('
            SELECT COUNT(q.id)
            FROM
            SmartUnityAppBundle:question q
            WHERE q.membre = :membreId
            AND q.signaler = 0
            ')
                ->setParameter('membreId', $membreId);

        $result = $query->getScalarResult();

        return $result[0][1];
    }

    public function isQuestionValid($questionId) {
        $query = $this->_em->createQuery('
            SELECT COUNT(q.id)
            FROM
            SmartUnityAppBundle:question q, SmartUnityAppBundle:reponse r
            WHERE r.question = q.id
            AND r.dateValidation IS NOT NULL
            AND q.id = :questionId
            AND q.signaler = 0
            ')
                ->setParameter('questionId', $questionId);

        $result = $query->getScalarResult();

        if ($result[0][1] > 0)
            return true;
        else
            return false;
    }

    public function isQuestionCertif($questionId) {
        $query = $this->_em->createQuery('
            SELECT COUNT(q.id)
            FROM
            SmartUnityAppBundle:question q, SmartUnityAppBundle:reponse r
            WHERE r.question = q.id
            AND r.dateCertification IS NOT NULL
            AND q.id = :questionId
            AND q.signaler = 0
            ')
                ->setParameter('questionId', $questionId);

        $result = $query->getScalarResult();

        if ($result[0][1] > 0)
            return true;
        else
            return false;
    }

    /////////////////////////////
    //////       LISTES QUESTIONS
    /////////////////////////////
    //Liste de questions On Fire
    public function getQuestionsOnFire($nbParPage, $page) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');

        $offset = ($page - 1) * $nbParPage;

        $sql = 'SELECT DISTINCT q.*
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE c.date_v <=> NULL
                AND q.date < SUBTIME(NOW(), \'0 48:00:00.0000\')
                AND q.signaler = 0
                ORDER BY q.date ASC
                LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);

        $result = $query->getResult();

        if (count($result) != 0)
            return $result;
        else
            return false;
    }

    //Liste des dernières questions sans réponses validées
    public function getLastQuestions($nbParPage, $page) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');

        $offset = ($page - 1) * $nbParPage;

        $sql = 'SELECT DISTINCT q.*
                 FROM 
                   (SELECT r.question_id AS question_id, r.dateValidation as date_v
                   FROM reponse r
                   WHERE NOT r.dateValidation <=> NULL) as c
                   RIGHT JOIN question q ON q.id = c.question_id
                   WHERE c.date_v <=> NULL
                   AND q.signaler = 0
                   ORDER BY q.date DESC
                   LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);

        $result = $query->getResult();

        if (count($result) != 0)
            return $result;
        else
            return false;
    }

    //Liste des questions avec une réponse validée
    public function getValidatedQuestions($nbParPage, $page) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');

        $offset = ($page - 1) * $nbParPage;

        $sql = 'SELECT DISTINCT q.*
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation
                    FROM reponse r WHERE r.dateValidation IS NOT NULL) as c
                LEFT JOIN question q ON q.id = c.question_id
                WHERE q.signaler = 0                
                ORDER BY q.date DESC   
                LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);

        $result = $query->getResult();

        if (count($result) != 0)
            return $result;
        else
            return false;
    }

    //Liste de questions On Fire
    public function getQuestionsOnFireForUser($nbParPage, $page, $membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');

        $offset = ($page - 1) * $nbParPage;

        $sql = 'SELECT DISTINCT q.*
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE c.date_v <=> NULL
                AND q.date < SUBTIME(NOW(), \'0 48:00:00.0000\')
                AND q.membre_id = :membreId
                ORDER BY q.date ASC
                LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);
        $query->setParameter('membreId', $membreId);

        $result = $query->getResult();

        if (count($result) != 0)
            return $result;
        else
            return false;
    }

    //Count les questions on Fire
    public function getNombreQuestionsOnFireForUser($membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT COUNT(q.id) AS nb_questions
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE c.date_v <=> NULL
                AND q.date < SUBTIME(NOW(), \'0 48:00:00.0000\')
                AND q.signaler = 0
                AND q.membre_id = :membreId';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);

        return $query->getSingleScalarResult();
    }

    public function getValidatedQuestionsForUser($nbParPage, $page, $membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');

        $offset = ($page - 1) * $nbParPage;

        $sql = 'SELECT DISTINCT q.*
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE NOT c.date_v <=> NULL
                AND q.membre_id = :membreId
                ORDER BY q.date DESC
                LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);
        $query->setParameter('membreId', $membreId);

        $result = $query->getResult();

        if (count($result) != 0)
            return $result;
        else
            return false;
    }

    public function getNombreValidatedQuestionsForUser($membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT COUNT(q.id) AS nb_questions
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE NOT c.date_v <=> NULL
                AND q.signaler = 0
                AND q.membre_id = :membreId';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);

        return $query->getSingleScalarResult();
    }

    //Liste des dernières questions sans réponses validées
    public function getLastQuestionsForUser($nbParPage, $page, $membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');

        $offset = ($page - 1) * $nbParPage;

        $sql = 'SELECT DISTINCT q.*
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE c.date_v <=> NULL
                AND q.membre_id = :membreId                
                ORDER BY q.date DESC
                LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);
        $query->setParameter('membreId', $membreId);

        $result = $query->getResult();

        if (count($result) != 0)
            return $result;
        else
            return false;
    }

    public function getNombreLastQuestionsForUser($membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT COUNT(q.id) AS nb_questions
                FROM 
                    (SELECT r.question_id AS question_id, r.dateValidation as date_v
                    FROM reponse r
                    WHERE NOT r.dateValidation <=> NULL) as c
                RIGHT JOIN question q ON q.id = c.question_id
                WHERE c.date_v <=> NULL
                AND q.membre_id = :membreId                
                AND q.signaler = 0';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);

        return $query->getSingleScalarResult();
    }

    public function getQuestionsAnsweredByUser($nbParPage, $page, $membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');
        $offset = ($page - 1) * $nbParPage;

        $sql = 'Select q.* from
        (Select r.id, question_id From reponse r  where r.membre_id = :membreId )as p , question q 
        Where p.question_id=q.id
        ORDER BY q.date DESC
        LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);

        $result = $query->getResult();
        if (count($result) != 0) {
            return $result;
            
        } else {
            return false;

        }
        
    }
    public function getNombreQuestionsAnsweredByUser($membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT count(q.id) as nb_questions 
            FROM
        (SELECT r.id, question_id FROM reponse r  WHERE r.membre_id = :membreId ) AS p , question q 
        Where p.question_id=q.id';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);

        return $query->getSingleScalarResult();
    }

    public function getQuestionsWithValidatedAnswersForUser($nbParPage, $page, $membreId) {
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');
        $offset = ($page - 1) * $nbParPage;

        $sql = 'Select q.* from
        (Select r.id, question_id From reponse r  where r.membre_id = :membreId and r.dateValidation <> null and r.dateCertification = null )as p , question q 
        Where p.question_id=q.id
        ORDER BY q.date DESC
        LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);

        $result = $query->getResult();
        if (count($result) != 0) {
            return $result;
            
        } else {
            return false;

        }
        
    }
    public function getNombreQuestionsWithValidatedAnswersForUser($membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT count(q.id) as nb_questions 
            FROM
        (SELECT r.id, question_id FROM reponse r  WHERE r.membre_id = :membreId AND r.dateValidation <> null and r.dateCertification = null ) AS p , question q 
        Where p.question_id=q.id';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);

        return $query->getSingleScalarResult();
    }

    public function getQuestionsWithCertifiedAnswersForUser($nbParPage, $page, $membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('SmartUnityAppBundle:question', 'q');
        $offset = ($page - 1) * $nbParPage;

        $sql = 'Select q.* from
        (Select r.id, question_id From reponse r  where r.membre_id = :membreId and r.dateCertification <> "" )as p , question q 
        Where p.question_id=q.id
        ORDER BY q.date DESC
        LIMIT :offset, :nbParPage';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);
        $query->setParameter('offset', (int) $offset);
        $query->setParameter('nbParPage', (int) $nbParPage);

        $result = $query->getResult();
        if (count($result) != 0) {
            return $result;
            
        } else {
            return false;

        }
        
    }
    public function getNombreQuestionsWithCertifiedAnswersForUser($membreId) {

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());

        $rsm->addScalarResult('nb_questions', 'nb');

        $sql = 'SELECT count(q.id) as nb_questions 
            FROM
        (SELECT r.id, question_id FROM reponse r  WHERE r.membre_id = :membreId AND r.dateCertification <> "" ) AS p , question q 
        Where p.question_id=q.id';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('membreId', $membreId);

        return $query->getSingleScalarResult();
    }
}
